/*
 * GDMatrix
 *
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/
 * and
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.jmx.swing;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author realor
 */
public class JMXMonitor extends javax.swing.JFrame
{
  static final Logger logger = Logger.getLogger("JMXMonitor");
  Monitor monitor;

  /** Creates new form JMXMonitor */
  public JMXMonitor()
  {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    northPanel = new javax.swing.JPanel();
    addButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();
    refreshLabel = new javax.swing.JLabel();
    refreshTextField = new javax.swing.JTextField();
    startButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    clearAlertsButton = new javax.swing.JButton();
    splitPane = new javax.swing.JSplitPane();
    scrollPane2 = new javax.swing.JScrollPane();
    textPane = new javax.swing.JTextPane();
    centerPanel = new javax.swing.JPanel();
    scrollPane1 = new javax.swing.JScrollPane();
    monitorTable = new javax.swing.JTable();
    alertsPanel = new javax.swing.JPanel();
    alertsLabel = new javax.swing.JLabel();
    numAlertsLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("JMX Monitor");
    setAlwaysOnTop(true);

    addButton.setText("Add monitor");
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });
    northPanel.add(addButton);

    removeButton.setText("Remove monitor");
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeButtonActionPerformed(evt);
      }
    });
    northPanel.add(removeButton);

    refreshLabel.setText("Refresh rate (sec.):");
    northPanel.add(refreshLabel);

    refreshTextField.setText("5");
    refreshTextField.setPreferredSize(new java.awt.Dimension(50, 20));
    northPanel.add(refreshTextField);

    startButton.setText("Start");
    startButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startButtonActionPerformed(evt);
      }
    });
    northPanel.add(startButton);

    stopButton.setText("Stop");
    stopButton.setEnabled(false);
    stopButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stopButtonActionPerformed(evt);
      }
    });
    northPanel.add(stopButton);

    clearAlertsButton.setText("Clear alerts");
    clearAlertsButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearAlertsButtonActionPerformed(evt);
      }
    });
    northPanel.add(clearAlertsButton);

    getContentPane().add(northPanel, java.awt.BorderLayout.NORTH);

    splitPane.setDividerLocation(200);
    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    textPane.setEditable(false);
    textPane.setFont(new java.awt.Font("Monospaced", 0, 12));
    scrollPane2.setViewportView(textPane);

    splitPane.setRightComponent(scrollPane2);

    centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    centerPanel.setLayout(new java.awt.BorderLayout());

    monitorTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Label", "Service", "Object", "Attribute", "Min. value", "Max. value", "Value"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        true, true, true, true, true, true, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    monitorTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    monitorTable.getTableHeader().setReorderingAllowed(false);
    scrollPane1.setViewportView(monitorTable);

    centerPanel.add(scrollPane1, java.awt.BorderLayout.CENTER);

    alertsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    alertsLabel.setText("Alerts:");
    alertsPanel.add(alertsLabel);

    numAlertsLabel.setText("0");
    alertsPanel.add(numAlertsLabel);

    centerPanel.add(alertsPanel, java.awt.BorderLayout.NORTH);

    splitPane.setLeftComponent(centerPanel);

    getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
    {//GEN-HEADEREND:event_addButtonActionPerformed
      DefaultTableModel model = (DefaultTableModel)monitorTable.getModel();
      model.addRow(new Object[6]);
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
    {//GEN-HEADEREND:event_removeButtonActionPerformed
      int index = monitorTable.getSelectedRow();
      if (index != -1)
      {
        DefaultTableModel model = (DefaultTableModel)monitorTable.getModel();
        model.removeRow(index);
      }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
      if (monitor == null)
      {
        monitor = new Monitor();
        int interval = 5;
        try
        {
          interval = Integer.parseInt(refreshTextField.getText());
        }
        catch (Exception ex)
        {
        }
        monitor.interval = interval;
        monitor.start();
      }
      addButton.setEnabled(false);
      removeButton.setEnabled(false);
      startButton.setEnabled(false);
      refreshTextField.setEditable(false);
      monitorTable.setEnabled(false);
      monitorTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
    {//GEN-HEADEREND:event_stopButtonActionPerformed
      if (monitor != null)
      {
        monitor.stop = true;
      }
      stopButton.setEnabled(false);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void clearAlertsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearAlertsButtonActionPerformed
    {//GEN-HEADEREND:event_clearAlertsButtonActionPerformed
      textPane.setText("");
    }//GEN-LAST:event_clearAlertsButtonActionPerformed

  private Object readAttribute(String service, String object, String attribute)
  {
    Object value = null;
    try
    {
      JMXServiceURL url = new JMXServiceURL(service);
      JMXConnector conn = JMXConnectorFactory.connect(url);
      try
      {
        conn.connect();
        ObjectName objectName = new ObjectName(object);
        value = conn.getMBeanServerConnection().
          getAttribute(objectName, attribute);
      }
      finally
      {
        conn.close();
      }
    }
    catch (Exception ex)
    {
      value = ex;
      logger.log(Level.SEVERE, ex.toString());
    }
    return value;
  }

  private boolean isOutOfRange(Object value, String minValue, String maxValue)
  {
    if (value == null || value instanceof Exception) return true;
    try
    {
      if (value instanceof String)
      {
        String text = (String)value;
        if (minValue != null && minValue.trim().length() > 0)
        {
          if (text.compareTo(minValue.toString()) < 0) return true;
        }
        if (maxValue != null && maxValue.trim().length() > 0)
        {
          if (text.compareTo(maxValue.toString()) > 0) return true;
        }
      }
      else if (value instanceof Integer)
      {
        Integer num = (Integer)value;
        if (minValue != null && minValue.trim().length() > 0)
        {
          if (num.compareTo(Integer.valueOf((String)minValue)) < 0) return true;
        }
        if (maxValue != null && maxValue.trim().length() > 0)
        {
          if (num.compareTo(Integer.valueOf((String)maxValue)) > 0) return true;
        }
      }
    }
    catch (Exception ex)
    {
    }
    return false;
  }

  private void loadParameters()
  {
    try
    {
      File file = getParametersFile();
      if (!file.exists()) return;

      BufferedReader is = new BufferedReader(
        new InputStreamReader(new FileInputStream(file)));
      try
      {
        DefaultTableModel model = (DefaultTableModel)monitorTable.getModel();
        refreshTextField.setText((String)is.readLine());
        int count = Integer.parseInt(is.readLine());
        for (int row = 0; row < count; row++)
        {
          Object[] data = new Object[7];
          for (int i = 0; i < 6; i++)
            data[i] = is.readLine();
          data[6] = null;
          model.addRow(data);
        }
      }
      finally
      {
        is.close();
      }
    }
    catch (Exception ex)
    {
      logger.log(Level.SEVERE, ex.toString());
    }
  }

  private void saveParameters()
  {
    try
    {
      PrintWriter os = new PrintWriter(getParametersFile());
      try
      {
        DefaultTableModel model = (DefaultTableModel)monitorTable.getModel();
        os.println(refreshTextField.getText());
        os.println(model.getRowCount());
        for (int row = 0; row < model.getRowCount(); row++)
        {
          Object value;
          for (int i = 0; i < 6; i++)
          {
            value = model.getValueAt(row, i);
            os.println(value == null ? "" : value);
          }
        }
      }
      finally
      {
        os.close();
      }
    }
    catch (Exception ex)
    {
      logger.log(Level.SEVERE, ex.toString());
    }
  }

  private File getParametersFile()
  {
    return new File(System.getProperty("user.home"), "jmxmonitor.config");
  }

  class Monitor extends Thread
  {
    int interval; // seconds
    boolean stop = false;

    @Override
    public void run()
    {
      try
      {
        SwingUtilities.invokeLater(new Runnable()
        {
          public void run()
          {
            stopButton.setEnabled(true);
            log("Started.");
          }
        });

        while (!stop)
        {
          // read data
          final DefaultTableModel model =
            (DefaultTableModel)monitorTable.getModel();
          Vector data = model.getDataVector();

          int numOutOfRange = 0;
          for (int i = 0; i < data.size(); i++)
          {
            Vector row = (Vector)data.get(i);
            String label = (String)row.get(0);
            String service = (String)row.get(1);
            String object = (String)row.get(2);
            String attribute = (String)row.get(3);
            String minValue = (String)row.get(4);
            String maxValue = (String)row.get(5);

            // call JMX service
            Object value = readAttribute(service, object, attribute);

            boolean isOutOfRange = isOutOfRange(value, minValue, maxValue);
            if (isOutOfRange)
            {
              numOutOfRange++;
            }

            // update table
            String message = null;
            if (isOutOfRange)
            {
              if (label == null || label.length() == 0) label = attribute;
              message = label + " = " + value;
            }

            final int rowIndex = i;
            final Object val = value;
            final String msg = message;
            SwingUtilities.invokeLater(new Runnable()
            {
              public void run()
              {
                model.setValueAt(val, rowIndex, 6);
                if (msg != null)
                {
                  log(msg);
                }
              }
            });
          }

          final String numAlerts = String.valueOf(numOutOfRange);
          SwingUtilities.invokeLater(new Runnable()
          {
            public void run()
            {
              numAlertsLabel.setText(numAlerts);
            }
          });

          if (numOutOfRange > 0)
          {
            JMXMonitor.this.setState(JFrame.NORMAL);
          }

          // sleep
          int i = 0;
          while (i < interval && !stop)
          {
            try
            {
              Thread.sleep(1000);
            }
            catch (Exception ex)
            {
            }
            i++;
          }
        }
      }
      finally
      {
        monitor = null;
        SwingUtilities.invokeLater(new Runnable()
        {
          public void run()
          {
            addButton.setEnabled(true);
            removeButton.setEnabled(true);
            startButton.setEnabled(true);
            refreshTextField.setEditable(true);
            monitorTable.setEnabled(true);
            log("Stopped.");
          }
        });
      }
    }
  }

  private void log(String message)
  {
    String text = textPane.getText();
    SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
    Date now = new Date();
    text += df.format(now) + ": ";
    text += message + "\n";
    textPane.setText(text);
    logger.log(Level.INFO, text);
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        try
        {
          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex)
        {
        }
        final JMXMonitor application = new JMXMonitor();
        application.loadParameters();
        application.addWindowListener(new WindowAdapter()
        {
          @Override
          public void windowClosing(WindowEvent e)
          {
            if (application.monitor != null) application.monitor.stop = true;
            application.saveParameters();
            application.setVisible(false);
            application.dispose();
            System.exit(0);
          }
        });
        application.setSize(760, 500);
        application.setLocationRelativeTo(null);
        application.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JLabel alertsLabel;
  private javax.swing.JPanel alertsPanel;
  private javax.swing.JPanel centerPanel;
  private javax.swing.JButton clearAlertsButton;
  private javax.swing.JTable monitorTable;
  private javax.swing.JPanel northPanel;
  private javax.swing.JLabel numAlertsLabel;
  private javax.swing.JLabel refreshLabel;
  private javax.swing.JTextField refreshTextField;
  private javax.swing.JButton removeButton;
  private javax.swing.JScrollPane scrollPane1;
  private javax.swing.JScrollPane scrollPane2;
  private javax.swing.JSplitPane splitPane;
  private javax.swing.JButton startButton;
  private javax.swing.JButton stopButton;
  private javax.swing.JTextPane textPane;
  // End of variables declaration//GEN-END:variables
}
