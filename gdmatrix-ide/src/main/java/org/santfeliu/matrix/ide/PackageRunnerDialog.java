/*
 * GDMatrix
 *
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/
 * and
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.matrix.ide;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 *
 * @author realor
 */
public class PackageRunnerDialog extends javax.swing.JDialog
{
  private File script;
  private String functionCall = "";
  private ConnectionParameters connectionParameters;
  private JavaScriptRunner runner;

  /**
   * Creates new form JavaScriptDialog
   */
  public PackageRunnerDialog(java.awt.Frame parent)
  {
    super(parent, true);
    initComponents();
    abortButton.setVisible(false);
  }

  public File getScript()
  {
    return script;
  }

  public void setScript(File script)
  {
    this.script = script;
  }

  public String getFunctionCall()
  {
    return functionCall;
  }

  public void setFunctionCall(String functionCall)
  {
    this.functionCall = functionCall;
  }

  public ConnectionParameters getConnectionParameters()
  {
    return connectionParameters;
  }

  public void setConnectionParameters(ConnectionParameters connectionParameters)
  {
    this.connectionParameters = connectionParameters;
    this.targetLabel.setText("Target: " + connectionParameters.getName() +
      " (" + connectionParameters.getURL() + ")");
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    centerPanel = new javax.swing.JPanel();
    targetLabel = new javax.swing.JLabel();
    scrollPane = new javax.swing.JScrollPane();
    outputTextArea = new javax.swing.JTextArea();
    southPanel = new javax.swing.JPanel();
    runButton = new javax.swing.JButton();
    abortButton = new javax.swing.JButton();
    closeButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setMinimumSize(new java.awt.Dimension(500, 400));
    setSize(new java.awt.Dimension(500, 400));

    centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    centerPanel.setLayout(new java.awt.BorderLayout());

    targetLabel.setText("target");
    targetLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 1, 4, 1));
    centerPanel.add(targetLabel, java.awt.BorderLayout.PAGE_START);

    scrollPane.setMinimumSize(new java.awt.Dimension(500, 400));

    outputTextArea.setEditable(false);
    outputTextArea.setColumns(20);
    outputTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    outputTextArea.setRows(5);
    scrollPane.setViewportView(outputTextArea);

    centerPanel.add(scrollPane, java.awt.BorderLayout.CENTER);

    getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

    runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/ide/resources/images/run.gif"))); // NOI18N
    runButton.setText("Run");
    runButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        runButtonActionPerformed(evt);
      }
    });
    southPanel.add(runButton);

    abortButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/ide/resources/images/stop.gif"))); // NOI18N
    abortButton.setText("Abort");
    abortButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        abortButtonActionPerformed(evt);
      }
    });
    southPanel.add(abortButton);

    closeButton.setText("Close");
    closeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        closeButtonActionPerformed(evt);
      }
    });
    southPanel.add(closeButton);

    getContentPane().add(southPanel, java.awt.BorderLayout.PAGE_END);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
  {//GEN-HEADEREND:event_closeButtonActionPerformed
    setVisible(false);
    dispose();
  }//GEN-LAST:event_closeButtonActionPerformed

  private void runButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runButtonActionPerformed
  {//GEN-HEADEREND:event_runButtonActionPerformed
    try
    {
      if (runner != null || script == null || connectionParameters == null)
        return;

      byte[] bytes = Files.readAllBytes(Paths.get(script.getAbsolutePath()));
      String code = new String(bytes, "UTF-8");
      code += "\n" + functionCall;

      runner = new JavaScriptRunner(code, outputTextArea);
      runner.getVariables().put("packageDir", script.getParentFile());
      runner.getVariables().put("serverUrl", connectionParameters.getURL());
      runner.getVariables().put("username", connectionParameters.getUsername());
      runner.getVariables().put("password", connectionParameters.getPassword());
      runner.setResultConsumer(result ->
      {
        runner = null;
        abortButton.setVisible(false);
        closeButton.setVisible(true);
      });
      runner.start();
      runButton.setVisible(false);
      abortButton.setVisible(true);
      closeButton.setVisible(false);
    }
    catch (Exception ex)
    {
      MatrixIDE.log(ex);
    }
  }//GEN-LAST:event_runButtonActionPerformed

  private void abortButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_abortButtonActionPerformed
  {//GEN-HEADEREND:event_abortButtonActionPerformed
    if (runner != null)
    {
      runner.end();
    }
  }//GEN-LAST:event_abortButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton abortButton;
  private javax.swing.JPanel centerPanel;
  private javax.swing.JButton closeButton;
  private javax.swing.JTextArea outputTextArea;
  private javax.swing.JButton runButton;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JPanel southPanel;
  private javax.swing.JLabel targetLabel;
  // End of variables declaration//GEN-END:variables
}
