/*
 * GDMatrix
 *
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/
 * and
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.matrix.ide;

import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.io.File;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import org.santfeliu.swing.JFontChooser;

/**
 *
 * @author realor
 */
public class OptionsDialog extends javax.swing.JDialog
{
  static final Locale[] LOCALES =
  {
    Locale.ENGLISH,
    new Locale("es"),
    new Locale("ca")
  };

  private boolean accept = false;
  private Font editorFont;

  /** Creates new form OptionsDialog */
  public OptionsDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
    loadLanguageComboBox();
    loadLAFComboBox();
    loadOptions();
  }

  public boolean showDialog(Component component)
  {
    pack();
    setMinimumSize(getSize());
    setLocationRelativeTo(component);
    setVisible(true);
    return accept;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    basePanel = new javax.swing.JPanel();
    tabbedPane = new javax.swing.JTabbedPane();
    generalPanel = new javax.swing.JPanel();
    languageLabel = new javax.swing.JLabel();
    lafLabel = new javax.swing.JLabel();
    fontLabel = new javax.swing.JLabel();
    languagePanel = new javax.swing.JPanel();
    languageComboBox = new javax.swing.JComboBox();
    restartLabel1 = new javax.swing.JLabel();
    lafPanel = new javax.swing.JPanel();
    lafComboBox = new javax.swing.JComboBox();
    restartLabel2 = new javax.swing.JLabel();
    fontSamplePanel = new javax.swing.JPanel();
    fontSampleTextField = new javax.swing.JTextField();
    changeFontButton = new javax.swing.JButton();
    editorPanel = new javax.swing.JPanel();
    indentSpacesLabel = new javax.swing.JLabel();
    indentSpacesSpinner = new javax.swing.JSpinner();
    workflowPanel = new javax.swing.JPanel();
    workflowFixURLLabel = new javax.swing.JLabel();
    updateRulesPanel = new javax.swing.JPanel();
    workflowFixRulesURLTextField = new javax.swing.JTextField();
    fixRulesButton = new javax.swing.JButton();
    fixWorkflowLabel = new javax.swing.JLabel();
    workflowFixOnOpenCheckBox = new javax.swing.JCheckBox();
    southPanel = new javax.swing.JPanel();
    acceptButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Options");
    setMinimumSize(new java.awt.Dimension(400, 240));

    basePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 1, 1, 1));
    basePanel.setLayout(new java.awt.BorderLayout());

    generalPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    generalPanel.setLayout(new java.awt.GridBagLayout());

    languageLabel.setText("Language:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    generalPanel.add(languageLabel, gridBagConstraints);

    lafLabel.setText("Look and feel:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    generalPanel.add(lafLabel, gridBagConstraints);

    fontLabel.setText("Default editor font:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    generalPanel.add(fontLabel, gridBagConstraints);

    languagePanel.setLayout(new java.awt.GridBagLayout());

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 1);
    languagePanel.add(languageComboBox, gridBagConstraints);

    restartLabel1.setText("(needs restart)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    languagePanel.add(restartLabel1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
    generalPanel.add(languagePanel, gridBagConstraints);

    lafPanel.setLayout(new java.awt.GridBagLayout());

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 1);
    lafPanel.add(lafComboBox, gridBagConstraints);

    restartLabel2.setText("(needs restart)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    lafPanel.add(restartLabel2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
    generalPanel.add(lafPanel, gridBagConstraints);

    fontSamplePanel.setLayout(new java.awt.GridBagLayout());

    fontSampleTextField.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 1);
    fontSamplePanel.add(fontSampleTextField, gridBagConstraints);

    changeFontButton.setText("...");
    changeFontButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    changeFontButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        changeFontButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    fontSamplePanel.add(changeFontButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
    generalPanel.add(fontSamplePanel, gridBagConstraints);

    tabbedPane.addTab("General", generalPanel);

    editorPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    editorPanel.setLayout(new java.awt.GridBagLayout());

    indentSpacesLabel.setText("Number of spaces per indent:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    editorPanel.add(indentSpacesLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    editorPanel.add(indentSpacesSpinner, gridBagConstraints);

    tabbedPane.addTab("Editor", editorPanel);

    workflowPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    workflowPanel.setLayout(new java.awt.GridBagLayout());

    workflowFixURLLabel.setText("Fix rules URL:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    workflowPanel.add(workflowFixURLLabel, gridBagConstraints);

    updateRulesPanel.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    updateRulesPanel.add(workflowFixRulesURLTextField, gridBagConstraints);

    fixRulesButton.setText("...");
    fixRulesButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    fixRulesButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        fixRulesButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    updateRulesPanel.add(fixRulesButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
    workflowPanel.add(updateRulesPanel, gridBagConstraints);

    fixWorkflowLabel.setText("Fix on open:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    workflowPanel.add(fixWorkflowLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 4);
    workflowPanel.add(workflowFixOnOpenCheckBox, gridBagConstraints);

    tabbedPane.addTab("Workflow", workflowPanel);

    basePanel.add(tabbedPane, java.awt.BorderLayout.CENTER);

    acceptButton.setText("Accept");
    acceptButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        acceptButtonActionPerformed(evt);
      }
    });
    southPanel.add(acceptButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });
    southPanel.add(cancelButton);

    basePanel.add(southPanel, java.awt.BorderLayout.PAGE_END);

    getContentPane().add(basePanel, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_acceptButtonActionPerformed
    {//GEN-HEADEREND:event_acceptButtonActionPerformed
      accept = true;
      setVisible(false);
      dispose();
      saveOptions();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
      accept = false;
      setVisible(false);
      dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void changeFontButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_changeFontButtonActionPerformed
    {//GEN-HEADEREND:event_changeFontButtonActionPerformed
      JFontChooser fontChooser = new JFontChooser((Frame)getOwner());
      fontChooser.setSelectedFont(Options.getEditorFont());
      if (fontChooser.showDialog(this))
      {
        editorFont = fontChooser.getSelectedFont();
        updateEditorFont(editorFont);
      }
    }//GEN-LAST:event_changeFontButtonActionPerformed

    private void fixRulesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fixRulesButtonActionPerformed
    {//GEN-HEADEREND:event_fixRulesButtonActionPerformed
      JFileChooser dialog = new JFileChooser();
      dialog.setDialogTitle("Select workflow fix rules");
      int result = dialog.showDialog(this, "Select");
      if (result == JFileChooser.APPROVE_OPTION)
      {
        File file = dialog.getSelectedFile();
        workflowFixRulesURLTextField.setText(file.toURI().toString());
      }
    }//GEN-LAST:event_fixRulesButtonActionPerformed

  private void loadOptions()
  {
    String fixRulesURL = Options.get("workflowFixRulesURL");
    workflowFixRulesURLTextField.setText(fixRulesURL);
    String fixOnOpen = Options.get("workflowFixOnOpen");
    workflowFixOnOpenCheckBox.setSelected("true".equals(fixOnOpen));
    updateEditorFont(Options.getEditorFont());
    indentSpacesSpinner.setValue(Options.getIndentSpaces());
  }

  private void saveOptions()
  {
    String fixRulesURL = workflowFixRulesURLTextField.getText();
    Options.set("workflowFixRulesURL", fixRulesURL);
    boolean fixOnOpen = workflowFixOnOpenCheckBox.isSelected();
    Options.set("workflowFixOnOpen", String.valueOf(fixOnOpen));
    String newLafClassName =
      ((LookAndFeelInfo) lafComboBox.getSelectedItem()).getClassName();
    Options.set("lafClassName", newLafClassName);
    Locale locale = (Locale)languageComboBox.getSelectedItem();
    Options.set("language", locale.getLanguage());
    if (editorFont != null)
    {
      Options.setEditorFont(editorFont);
    }
    Options.setIndentSpaces((Integer)indentSpacesSpinner.getValue());
  }

  private void updateEditorFont(Font font)
  {
    String fontName = font.getName() + " " +
      (font.isBold() ? "Bold " : "") +
      (font.isItalic() ? "Italic " : "") +
      font.getSize();
    font = font.deriveFont(12f);
    fontSampleTextField.setText(fontName);
    fontSampleTextField.setFont(font);
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(() ->
    {
      OptionsDialog dialog = new OptionsDialog(new javax.swing.JFrame(), true);
      dialog.addWindowListener(new java.awt.event.WindowAdapter()
      {

        @Override
        public void windowClosing(java.awt.event.WindowEvent e)
        {
          System.exit(0);
        }
      });
      dialog.setVisible(true);
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton acceptButton;
  private javax.swing.JPanel basePanel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton changeFontButton;
  private javax.swing.JPanel editorPanel;
  private javax.swing.JButton fixRulesButton;
  private javax.swing.JLabel fixWorkflowLabel;
  private javax.swing.JLabel fontLabel;
  private javax.swing.JPanel fontSamplePanel;
  private javax.swing.JTextField fontSampleTextField;
  private javax.swing.JPanel generalPanel;
  private javax.swing.JLabel indentSpacesLabel;
  private javax.swing.JSpinner indentSpacesSpinner;
  private javax.swing.JComboBox lafComboBox;
  private javax.swing.JLabel lafLabel;
  private javax.swing.JPanel lafPanel;
  private javax.swing.JComboBox languageComboBox;
  private javax.swing.JLabel languageLabel;
  private javax.swing.JPanel languagePanel;
  private javax.swing.JLabel restartLabel1;
  private javax.swing.JLabel restartLabel2;
  private javax.swing.JPanel southPanel;
  private javax.swing.JTabbedPane tabbedPane;
  private javax.swing.JPanel updateRulesPanel;
  private javax.swing.JCheckBox workflowFixOnOpenCheckBox;
  private javax.swing.JTextField workflowFixRulesURLTextField;
  private javax.swing.JLabel workflowFixURLLabel;
  private javax.swing.JPanel workflowPanel;
  // End of variables declaration//GEN-END:variables

  private void loadLAFComboBox()
  {
    String lafClassName = Options.get("lafClassName");
    if (lafClassName == null)
    {
      lafClassName = UIManager.getLookAndFeel().getClass().getName();
    }
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    LookAndFeelInfo[] infos = UIManager.getInstalledLookAndFeels();
    int selected = 0;
    for (int i = 0; i < infos.length; i++)
    {
      LookAndFeelInfo info = infos[i];
      model.addElement(info);
      if (info.getClassName().equals(lafClassName))
      {
        selected = i;
      }
    }
    lafComboBox.setModel(model);
    lafComboBox.setSelectedIndex(selected);
    lafComboBox.setRenderer(new DefaultListCellRenderer()
    {

      @Override
      public Component getListCellRendererComponent(
              JList list, Object value, int index, boolean isSelected,
              boolean cellHasFocus)
      {
        Component component = super.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);
        LookAndFeelInfo info = (LookAndFeelInfo) value;
        setText(info.getName());
        return component;
      }
    });
  }

  private void loadLanguageComboBox()
  {
    Locale currentLocale = Locale.getDefault();
    String language = currentLocale.getLanguage();
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    int selected = 0;
    for (int i = 0; i < LOCALES.length; i++)
    {
      Locale locale = LOCALES[i];
      model.addElement(locale);
      if (locale.getLanguage().equals(language))
      {
        selected = i;
      }
    }
    languageComboBox.setModel(model);
    languageComboBox.setSelectedIndex(selected);
    languageComboBox.setRenderer(new DefaultListCellRenderer()
    {

      @Override
      public Component getListCellRendererComponent(
              JList list, Object value, int index, boolean isSelected,
              boolean cellHasFocus)
      {
        Component component = super.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);
        Locale locale = (Locale) value;
        setText(locale.getDisplayLanguage(locale).toLowerCase());
        return component;
      }
    });
  }
}
