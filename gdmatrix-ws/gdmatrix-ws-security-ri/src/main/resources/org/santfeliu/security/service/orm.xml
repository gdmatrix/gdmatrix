<?xml version="1.0" encoding="UTF-8" ?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd"
                 version="1.0">
  <description>Security</description>
  <package>org.santfeliu.security.service</package>

  <named-query name="selectUser">
    <query>
      SELECT u FROM User u WHERE trim(u.userId) = trim(:userId)
    </query>
  </named-query>

  <named-query name="updateUser">
    <query>
      UPDATE User as u 
      SET u.userId = :userId, 
      u.displayName = :displayName,
      u.password = :password,        
      u.personId = :personId,
      u.lockedValue = :lockedValue,
      u.creationUserId = :creationUserId, 
      u.stddgr = :stddgr, 
      u.stdhgr = :stdhgr,
      u.changeUserId = :changeUserId, 
      u.stddmod = :stddmod, 
      u.stdhmod = :stdhmod
      WHERE trim(u.userId) = trim(:userId)
    </query>
  </named-query>

  <named-query name="removeUser">
    <query>
      DELETE FROM User as u WHERE trim(u.userId) = trim(:userId)
    </query>
  </named-query> 

  <named-query name="findUsersMultipleId">
    <query>
      SELECT u, up1.value, up2.value, up3.value, up4.value
      FROM User u
        LEFT JOIN UserProperty up1 ON (up1.userId = trim(u.userId) AND up1.name = 'failedLoginAttempts' and up1.index = 1)
        LEFT JOIN UserProperty up2 ON (up2.userId = trim(u.userId) AND up2.name = 'lastSuccessLoginDateTime' and up2.index = 1)
        LEFT JOIN UserProperty up3 ON (up3.userId = trim(u.userId) AND up3.name = 'lastFailedLoginDateTime' and up3.index = 1)
        LEFT JOIN UserProperty up4 ON (up4.userId = trim(u.userId) AND up4.name = 'lastIntrusionDateTime' and up4.index = 1)
      WHERE (locate(concat(',', concat(upper(trim(u.userId)), ',')), :userId) > 0 or :userId is null)
      and (upper(u.displayName) like :displayName or :displayName is null)
      and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
      and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)      
      ORDER BY u.userId
    </query>
  </named-query>

  <named-query name="findUsersSingleId">
    <query>
      SELECT u, up1.value, up2.value, up3.value, up4.value
      FROM User u
        LEFT JOIN UserProperty up1 ON (up1.userId = trim(u.userId) AND up1.name = 'failedLoginAttempts' and up1.index = 1)
        LEFT JOIN UserProperty up2 ON (up2.userId = trim(u.userId) AND up2.name = 'lastSuccessLoginDateTime' and up2.index = 1)
        LEFT JOIN UserProperty up3 ON (up3.userId = trim(u.userId) AND up3.name = 'lastFailedLoginDateTime' and up3.index = 1)
        LEFT JOIN UserProperty up4 ON (up4.userId = trim(u.userId) AND up4.name = 'lastIntrusionDateTime' and up4.index = 1)
      WHERE (upper(trim(u.userId)) like :userId or :userId is null)
      and (upper(u.displayName) like :displayName or :displayName is null)
      and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
      and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
      ORDER BY u.userId
    </query>
  </named-query>


  <named-query name="countUsersMultipleId">
    <query>
      SELECT count(u)
      FROM User u
      WHERE (locate(concat(',', concat(upper(trim(u.userId)), ',')), :userId) > 0 or :userId is null)
      and (upper(u.displayName) like :displayName or :displayName is null)
      and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
      and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
    </query>
  </named-query>

  <named-query name="countUsersSingleId">
    <query>
      SELECT count(u)
      FROM User u
      WHERE (upper(trim(u.userId)) like :userId or :userId is null)
      and (upper(u.displayName) like :displayName or :displayName is null)
      and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
      and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
    </query>
  </named-query>

  <named-query name="selectUserInRole">
    <query>
      SELECT u FROM UserInRole u WHERE trim(u.userId) = trim(:userId)
      and trim(u.roleId) = trim(:roleId)
    </query>
  </named-query>

  <named-query name="listUserRoles">
    <query>
      SELECT u.roleId FROM UserInRole u WHERE trim(u.userId) = trim(:userId)
    </query>
  </named-query>

  <named-query name="removeRole">
    <query>
      DELETE FROM Role r WHERE r.roleId = :roleId
    </query>
  </named-query>

  <named-query name="findRolesMultipleId">
    <query>
      SELECT r
      FROM Role r
      WHERE (locate(concat(',', concat(upper(r.roleId), ',')), :roleId) > 0 or :roleId is null)
      and (upper(r.name) like :name or :name is null)
      and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
      and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
      and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
      ORDER BY r.roleId
    </query>
  </named-query>
    
  <named-query name="findRolesSingleId">
    <query>
      SELECT r
      FROM Role r
      WHERE (upper(r.roleId) like :roleId or :roleId is null)
      and (upper(r.name) like :name or :name is null)
      and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
      and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
      and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
      ORDER BY r.roleId
    </query>
  </named-query>

  <named-query name="countRolesMultipleId">
    <query>
      SELECT count(r)
      FROM Role r
      WHERE (locate(concat(',', concat(upper(r.roleId), ',')), :roleId) > 0 or :roleId is null)
      and (upper(r.name) like :name or :name is null)
      and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
      and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
      and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
    </query>
  </named-query>

  <named-query name="countRolesSingleId">
    <query>
      SELECT count(r)
      FROM Role r
      WHERE (upper(r.roleId) like :roleId or :roleId is null)
      and (upper(r.name) like :name or :name is null)
      and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
      and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
      and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
    </query>
  </named-query>

  <named-query name="removeUserInRole">
    <query>
      DELETE FROM UserInRole ur
      WHERE trim(ur.userId) = trim(:userId)
      and (ur.roleId = :roleId or :roleId is null)
    </query>
  </named-query>

  <named-query name="updateUserInRole">
    <query>
      UPDATE UserInRole ur
      SET ur.comments = :comments, ur.startDate = :startDate,
      ur.endDate = :endDate
      WHERE trim(ur.userId) = trim(:userId)
      and ur.roleId = :roleId
    </query>
  </named-query>
    
  <named-query name="findUserInRoles">
    <query>
      SELECT ur
      FROM UserInRole ur
      WHERE (trim(ur.userId) = trim(:userId) or :userId is null)
      and (ur.roleId = :roleId or :roleId is null)
      and (upper(ur.comments) like :comments or :comments is null)
      and
      (
      (
      (:minDate is null)
      and
      (:maxDate is null)
      )
      or
      (
      (:minDate is null)
      and
      (:maxDate &gt;= ur.startDate)
      )
      or
      (
      (:maxDate is null)
      and
      (:minDate &lt;= ur.endDate)
      )
      or
      (
      (:minDate &lt;= ur.endDate or ur.endDate is null)
      and
      (:maxDate &gt;= ur.startDate or ur.startDate is null)
      )
      )
    </query>
  </named-query>

  <named-query name="findUserInRoleViews">
    <query>
      SELECT u, ur.startDate, ur.endDate
      FROM UserInRole ur, User u
      WHERE ur.userId = u.userId
      AND ur.roleId = :roleId
      AND (upper(ur.comments) like :comments or :comments is null)
      AND
      (
      (
      (:minDate is null)
      and
      (:maxDate is null)
      )
      or
      (
      (:minDate is null)
      and
      (:maxDate &gt;= ur.startDate)
      )
      or
      (
      (:maxDate is null)
      and
      (:minDate &lt;= ur.endDate)
      )
      or
      (
      (:minDate &lt;= ur.endDate or ur.endDate is null)
      and
      (:maxDate &gt;= ur.startDate or ur.startDate is null)
      )
      )
      ORDER BY ur.userId
    </query>
  </named-query>

  <named-query name="findRoleInUserViews">
    <query>
      SELECT r, ur.startDate, ur.endDate
      FROM UserInRole ur, Role r
      WHERE ur.roleId = r.roleId
      AND trim(ur.userId) = trim(:userId)
      AND (upper(ur.comments) like :comments or :comments is null)
      AND
      (
      (
      (:minDate is null)
      and
      (:maxDate is null)
      )
      or
      (
      (:minDate is null)
      and
      (:maxDate &gt;= ur.startDate)
      )
      or
      (
      (:maxDate is null)
      and
      (:minDate &lt;= ur.endDate)
      )
      or
      (
      (:minDate &lt;= ur.endDate or ur.endDate is null)
      and
      (:maxDate &gt;= ur.startDate or ur.startDate is null)
      )
      )
      ORDER BY ur.roleId
    </query>
  </named-query>

  <named-query name="findRoleInRoles">
    <query>
      SELECT r
      FROM RoleInRole r
      WHERE (r.containerRoleId = :containerRoleId or :containerRoleId is null)
      and (r.includedRoleId = :includedRoleId or :includedRoleId is null)
    </query>
  </named-query>

  <named-query name="findIncludedRoleViews">
    <query>
      SELECT r
      FROM RoleInRole rr, Role r
      WHERE rr.includedRoleId = r.roleId
      AND rr.containerRoleId = :containerRoleId
    </query>
  </named-query>

  <named-query name="findContainerRoleViews">
    <query>
      SELECT r
      FROM RoleInRole rr, Role r
      WHERE rr.containerRoleId = r.roleId
      AND rr.includedRoleId = :includedRoleId
    </query>
  </named-query>

  <named-query name="touchUser">
    <query>
      UPDATE User u SET u.stddmod = :date, u.stdhmod = :time WHERE
      trim(u.userId) = :userId
    </query>
  </named-query>

  <named-query name="touchRole">
    <query>
      UPDATE Role r SET r.changeDateTime = :dateTime WHERE
      r.roleId = :roleId
    </query>
  </named-query>

  <named-query name="findUserProperties">
    <query>
      SELECT p
      FROM UserProperty p
      WHERE (trim(p.userId) = :userId)
        AND (:name is null or p.name like :name)
        AND (:value is null or p.value like :value)
      ORDER BY p.name, p.index
    </query>
  </named-query>

  <named-query name="findUserLockProperties">
    <query>
      SELECT p
      FROM UserProperty p
      WHERE (trim(p.userId) = :userId)
        AND (p.name = 'failedLoginAttempts' 
          OR p.name = 'lastSuccessLoginDateTime' 
          OR p.name = 'lastFailedLoginDateTime' 
          OR p.name = 'lastIntrusionDateTime')
    </query>
  </named-query>

  <named-query name="removeUserProperty">
    <query>
       DELETE FROM UserProperty p
       WHERE trim(p.userId) = :userId
         AND (:name is null OR p.name = :name)
         AND (:index is null OR p.index = :index)
    </query>
  </named-query>

  <entity class="org.santfeliu.security.service.DBUser" name="User"
    access="PROPERTY">
    <!-- Synonym of GENESYS5.ORG_USUARI -->
    <table name="ORG_USUARI"  />
    <attributes>
      <id name="userId">
        <column name="USRCOD" length="20" />
      </id>
      <basic name="password">
        <column name="USRPASS" length="64" />
      </basic>
      <basic name="displayName">
        <column name="USRDESC" length="60" />
      </basic>
      <basic name="personId">
        <column name="PERSCOD" length="20" />
      </basic>
      <basic name="lockedValue">
        <column name="BLOQUEJAT" precision="1" scale="0" />
      </basic>
      <basic name="creationUserId">
        <column name="STDUGR" length="20" />
      </basic>
      <basic name="changeUserId">
        <column name="STDUMOD" length="20" />
      </basic>
      <basic name="stddgr">
        <column name="STDDGR" length="8" />
      </basic>
      <basic name="stdhgr">
        <column name="STDHGR" length="6" />
      </basic>
      <basic name="stddmod">
        <column name="STDDMOD" length="8" />
      </basic>
      <basic name="stdhmod">
        <column name="STDHMOD" length="6" />
      </basic>
      <transient name="failedLoginAttempts" />
      <transient name="lastSuccessLoginDateTime" />
      <transient name="lastFailedLoginDateTime" />
      <transient name="lastIntrusionDateTime" />      
    </attributes>
  </entity>

  <entity class="org.santfeliu.security.service.DBRole" name="Role"
    access="PROPERTY">
    <table name="APL_ROL" />
    <attributes>
      <id name="roleId">
        <column name="ROLCOD" length="20" />
      </id>
      <basic name="name">
        <column name="ROLDESC" length="100" />
      </basic>
      <basic name="description">
        <column name="OBSERV" length="400" />
      </basic>
      <basic name="roleTypeId">
        <column name="ROLETYPEID" length="50" />
      </basic>
      <basic name="creationUserId">
        <column name="CREATIONUSERID" length="20" />
      </basic>
      <basic name="creationDateTime">
        <column name="CREATIONDT" length="14" />
      </basic>
      <basic name="changeUserId">
        <column name="CHANGEUSERID" length="20" />
      </basic>
      <basic name="changeDateTime">
        <column name="CHANGEDT" length="14" />
      </basic>
    </attributes>
  </entity>

  <entity class="org.santfeliu.security.service.DBUserInRole"
    name="UserInRole" access="PROPERTY">
    <table name="APL_ROLUSR" />
    <id-class class="org.santfeliu.security.service.DBUserInRolePK" />
    <attributes>
      <id name="userId">
        <column name="USRCOD" length="20" />
      </id>
      <id name="roleId">
        <column name="ROLCOD" length="20" />
      </id>
      <basic name="comments">
        <column name="COMMENTS" length="1000" />
      </basic>
      <basic name="startDate">
        <column name="STARTDATE" length="8" />
      </basic>
      <basic name="endDate">
        <column name="ENDDATE" length="8" />
      </basic>
    </attributes>
  </entity>

  <entity class="org.santfeliu.security.service.DBRoleInRole" 
    name="RoleInRole" access="PROPERTY">
    <table name="APL_ROLROL" />
    <id-class class="org.santfeliu.security.service.DBRoleInRolePK" />
    <attributes>
      <id name="containerRoleId">
        <column name="ROLCOD" length="20" />
      </id>
      <id name="includedRoleId">
        <column name="INROLCOD" length="20" />
      </id>
    </attributes>
  </entity>

  <entity class="org.santfeliu.security.service.DBUserProperty" 
    name="UserProperty" access="PROPERTY">
    <table name="USER_PREFERENCES" />
    <attributes>
      <id name="userId">
        <column name="USRCOD" length="20" />
      </id>        
      <id name="name">
        <column name="NAME" length="100" />
      </id>
      <id name="index">
        <column name="IDX" precision="5" scale="0" />
      </id>
      <basic name="value">
        <column name="VALUE" length="100" />
      </basic>
    </attributes>
  </entity>

</entity-mappings>
