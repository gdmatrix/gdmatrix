selectContentTypeSQL = \
SELECT c.filetype, c.mimetype \
FROM CNT_CONTENT c WHERE c.uuid =  ?

selectContentSQL =  \
SELECT c.uuid, c.filetype, c.mimetype, c.puid, c.language, \
c.captureuser, c.capturedate, c.contentsize, i.data, e.url \
FROM CNT_CONTENT c, CNT_INTERNAL i, CNT_EXTERNAL e  \
WHERE c.uuid = i.uuid (+) and c.uuid = e.uuid (+) and c.uuid = ?

findContentsSQL =  \
SELECT uuid, mimetype, puid, language, \
captureuser, capturedate, contentsize \
FROM CNT_CONTENT  \
WHERE uuid = ?

insertContentMetaDataSQL = \
INSERT INTO CNT_CONTENT \
(uuid, filetype, mimetype, puid, language, captureuser, capturedate, \
contentsize, creationdate) \
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)

insertInternalContentSQL = \
INSERT INTO CNT_INTERNAL (uuid, fmt, data) VALUES (?, ?, ?)

insertExternalContentSQL = \
INSERT INTO CNT_EXTERNAL (uuid, fmt, url) VALUES (?, ?, ?)

copyContentMetaDataSQL = \
INSERT INTO CNT_CONTENT \
(uuid, filetype, mimetype, puid, language, captureuser, capturedate, \
contentsize, creationdate) \
SELECT ?, filetype, mimetype, puid, ?, ?, ?, \
contentsize, creationdate \
FROM CNT_CONTENT \
WHERE uuid = ?

copyInternalContentSQL = \
INSERT INTO CNT_INTERNAL (uuid, fmt, data) \
SELECT ?, fmt, data FROM CNT_INTERNAL WHERE uuid = ?

copyExternalContentSQL = \
INSERT INTO CNT_EXTERNAL (uuid, fmt, url) \
SELECT ?, fmt, url FROM CNT_EXTERNAL WHERE uuid = ?

deleteContentMetaDataSQL = \
DELETE CNT_CONTENT WHERE uuid = ?

deleteInternalContentSQL = \
DELETE CNT_INTERNAL WHERE uuid = ?

deleteExternalContentSQL = \
DELETE CNT_EXTERNAL WHERE uuid = ?

selectInternalRowidSQL = \
SELECT rowid FROM CNT_INTERNAL WHERE uuid = ?

selectExternalRowidSQL = \
SELECT rowid FROM CNT_EXTERNAL WHERE uuid = ?

selectMarkupSQL = \
SELECT document FROM CNT_MARKUP WHERE query_id = ?

deleteMarkupSQL = \
DELETE FROM CNT_MARKUP WHERE query_id = ?

markupInternalCall = \
begin \
ctx_doc.set_key_type('ROWID'); \
ctx_doc.markup(index_name => 'CNT_INTERNAL_IDX', \
               textkey => ?, \
               text_query => ?, \
               query_id => ?, \
               restab => 'CNT_MARKUP', \
               starttag => ?, \
               endtag => ?, \
               prevtag => ?, \
               nexttag => ?); \
end;

markupExternalCall = \
begin \
ctx_doc.set_key_type('ROWID'); \
ctx_doc.markup(index_name => 'CNT_EXTERNAL_IDX', \
               textkey => ?, \
               text_query => ?, \
               query_id => ?, \
               restab => 'CNT_MARKUP', \
               starttag => ?, \
               endtag => ?, \
               prevtag => ?, \
               nexttag => ?); \
end;

createContentTable = \
CREATE TABLE CNT_CONTENT \
( \
  UUID CHAR(36) NOT NULL, \
  FILETYPE CHAR(1) NOT NULL, \
  MIMETYPE VARCHAR2(200), \
  CAPTUREUSER VARCHAR2(50), \
  CAPTUREDATE VARCHAR2(14), \
  "LANGUAGE" CHAR(2), \
  CONTENTSIZE NUMBER(20, 0), \
  CREATIONDATE VARCHAR2(14), \
  PUID VARCHAR2(50), \
  CONSTRAINT PK_CNT_CONTENT PRIMARY KEY(UUID) VALIDATE \
) \

createExternalTable = \
CREATE TABLE CNT_EXTERNAL \
( \
  UUID CHAR(36) NOT NULL, \
  URL VARCHAR2(1000) NOT NULL, \
  FMT VARCHAR2(10) NOT NULL, \
  CONSTRAINT PK_CNT_EXTERNAL PRIMARY KEY (UUID) VALIDATE, \
  CONSTRAINT FK_CNT_EXTERNAL_CNT_CONTENT FOREIGN KEY (UUID) \
    REFERENCES CNT_CONTENT(UUID) VALIDATE \
) \

createInternalTable = \
CREATE TABLE CNT_INTERNAL \
( \
  UUID CHAR(36) NOT NULL, \
  DATA BLOB, \
  FMT VARCHAR2(10) NOT NULL, \
  CONSTRAINT PK_INTERNAL PRIMARY KEY (UUID) VALIDATE, \
  CONSTRAINT FK_CNT_INTERNAL_CNT_CONTENT FOREIGN KEY (UUID) \
    REFERENCES CNT_CONTENT(UUID) VALIDATE \
) \

createMarkupTable = \
CREATE TABLE CNT_MARKUP \
 ( \
  QUERY_ID VARCHAR2(36 BYTE) NOT NULL ENABLE, \
  DOCUMENT CLOB, \
  OFFSET NUMBER(20,0), \
  LENGTH NUMBER(20,0) \
 ) 
